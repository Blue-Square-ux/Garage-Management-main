<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update Service - Guard Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .form-container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 2rem;
        }
        .step-indicator {
            display: flex;
            justify-content: space-between;
            margin-bottom: 2rem;
        }
        .step {
            flex: 1;
            text-align: center;
            padding: 1rem;
            border-radius: 8px;
            margin: 0 0.5rem;
            position: relative;
        }
        .step.completed {
            background-color: #d4edda;
            border: 2px solid #28a745;
            color: #155724;
        }
        .step.active {
            background-color: #fff3cd;
            border: 2px solid #ffc107;
            color: #856404;
        }
        .step.pending {
            background-color: #f8f9fa;
            border: 2px solid #dee2e6;
            color: #6c757d;
        }
        .step-icon {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="/guard/dashboard">Guard Dashboard</a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/logout">Logout</a>
            </div>
        </div>
    </nav>

    <div class="container form-container">
        <h2 class="mb-4">Service Completion - Guard Panel</h2>

        <!-- Step Indicator -->
        <div class="step-indicator">
            <div class="step completed">
                <div class="step-icon"><i class="bi bi-check-circle-fill"></i></div>
                <div><strong>Guard Entry</strong></div>
                <small>Vehicle & Gate-In</small>
            </div>
            <div class="step <%= service.clientApprovalMethod && service.assignedTechnician && service.estimatedCompletionTime ? 'completed' : 'pending' %>">
                <div class="step-icon">
                    <i class="bi <%= service.clientApprovalMethod && service.assignedTechnician && service.estimatedCompletionTime ? 'bi-check-circle-fill' : 'bi-gear' %>"></i>
                </div>
                <div><strong>Service Setup</strong></div>
                <small>Floor Manager</small>
            </div>
            <div class="step <%= service.status === 'completed' ? 'completed' : (service.clientApprovalMethod && service.assignedTechnician ? 'active' : 'pending') %>">
                <div class="step-icon">
                    <i class="bi <%= service.status === 'completed' ? 'bi-check-circle-fill' : 'bi-clock' %>"></i>
                </div>
                <div><strong>Guard Completion</strong></div>
                <small>Gate-Out & Sign-off</small>
            </div>
        </div>

        <!-- Service Information Card -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="bi bi-info-circle"></i> Service Information</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Vehicle Number:</strong> <%= service.vehicleNumber %></p>
                        <p><strong>Gate-In Time:</strong> <%= new Date(service.gateInDateTime).toLocaleString() %></p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Assigned Mechanic:</strong> <%= service.assignedMechanic || 'Not assigned' %></p>
                        <p><strong>Status:</strong> 
                            <span class="badge <%= service.status === 'completed' ? 'bg-success' : (service.status === 'in-progress' ? 'bg-warning' : 'bg-secondary') %>">
                                <%= service.status.charAt(0).toUpperCase() + service.status.slice(1) %>
                            </span>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <% if (!service.clientApprovalMethod || !service.assignedTechnician || !service.estimatedCompletionTime) { %>
            <div class="alert alert-warning text-center fw-bold fs-5">
                <i class="bi bi-exclamation-triangle"></i>
                Waiting for Floor Manager to complete service setup before proceeding with gate-out.
            </div>
        <% } else { %>
            <form id="updateServiceForm" action="/guard/update-service/<%= service._id %>" method="POST" novalidate>
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-pencil"></i> Complete Service</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="gatePassDateTime" class="form-label">Gate-Out Date & Time *</label>
                            <div class="input-group">
<%
  // Combine gatePassDay and gatePassTime to ISO datetime-local string if available
  let gatePassDateTimeValue = '';
  if (service.gatePassDay) {
    const day = new Date(service.gatePassDay);
    const timeParts = service.gatePassTime ? service.gatePassTime.split(':') : ['00', '00'];
    day.setHours(parseInt(timeParts[0], 10));
    day.setMinutes(parseInt(timeParts[1], 10));
    gatePassDateTimeValue = day.toISOString().slice(0,16);
  }
%>
<input 
    type="datetime-local" 
    class="form-control" 
    id="gatePassDateTime" 
    name="gatePassDateTime"
    value="<%= gatePassDateTimeValue %>"
    required
>
                                <button type="button" class="btn btn-outline-secondary" id="fillCurrentDateTimeBtn">
                                    <i class="bi bi-clock"></i> Now
                                </button>
                            </div>
                            <div class="invalid-feedback">Gate-Out Date & Time is required</div>
                        </div>

                        <div class="mb-3">
                            <label for="gatePassType" class="form-label">Gate-Pass Type *</label>
                            <select class="form-select" id="gatePassType" name="gatePassType" required>
                                <option value="" selected disabled>Select Gate-Pass Type</option>
                                <option value="Manual">Manual</option>
                                <option value="System">System</option>
                            </select>
                            <div class="invalid-feedback">Gate-Pass Type is required</div>
                        </div>

                        <div class="mb-3" id="gatePasserNameContainer" style="display:none;">
                            <label for="gatePasserName" class="form-label">Gate-Passer's Name *</label>
                            <select class="form-select" id="gatePasserName" name="gatePasserName" required>
                                <option value="" selected disabled>Select Gate-Passer's Name </option>
                                <option value="John Doe">John Doe</option>
                                <option value="Jane Smith">Jane Smith</option>
                                <option value="Michael Johnson">Michael Johnson</option>
                                <option value="Emily Davis">Emily Davis</option>
                                <option value="Other">Other</option>
                            </select>
                            <div class="invalid-feedback">Gate-Passer's Name is required</div>
                            <input type="text" class="form-control mt-2" id="gatePasserNameOther" name="gatePasserNameOther" placeholder="Enter Gate-Passer's Name" style="display:none;" required>
                            <div class="invalid-feedback" id="gatePasserNameOtherFeedback" style="display:none;">Gate-Passer's Name is required</div>
                        </div>

                        <div class="mb-3">
                            <label for="signedBy" class="form-label">Signed By *</label>
                            <input type="text" class="form-control" id="signedBy" name="signedBy" required>
                            <div class="invalid-feedback">Signature is required</div>
                        </div>
                    </div>
                </div>

                <div class="mt-4 d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="submit" class="btn btn-primary btn-lg">
                        <i class="bi bi-check-circle"></i> Complete Service
                    </button>
                    <a href="/guard/update-service" class="btn btn-secondary btn-lg">Cancel</a>
                </div>
            </form>
        <% } %>
    </div>

    <script>
        // Auto-fill current date and time in IST (UTC+5:30)

        document.getElementById('fillCurrentDateTimeBtn')?.addEventListener('click', () => {

            const now = new Date();

            // Use Intl.DateTimeFormat to get IST time components
            const options = {
                timeZone: 'Asia/Kolkata',
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                hour12: false,
            };

            const formatter = new Intl.DateTimeFormat('en-GB', options);
            const parts = formatter.formatToParts(now);

            const dateParts = {};
            parts.forEach(({ type, value }) => {
                dateParts[type] = value;
            });

            const istISOTime = `${dateParts.year}-${dateParts.month}-${dateParts.day}T${dateParts.hour}:${dateParts.minute}`;

            document.getElementById('gatePassDateTime').value = istISOTime;

        });

        // Bootstrap form validation
        (function () {
            'use strict';
            const form = document.getElementById('updateServiceForm');
            if (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            }

            // Show/hide Gate-Passer's Name dropdown based on Gate-Pass Type selection
            const gatePassTypeSelect = document.getElementById('gatePassType');
            const gatePasserNameContainer = document.getElementById('gatePasserNameContainer');
            const gatePasserNameSelect = document.getElementById('gatePasserName');

            if (gatePassTypeSelect) {
                gatePassTypeSelect.addEventListener('change', function () {
                    if (this.value === 'Manual') {
                        gatePasserNameContainer.style.display = 'block';
                        gatePasserNameSelect.setAttribute('required', 'required');
                        gatePasserNameSelect.classList.remove('is-invalid');
                        gatePasserNameOther.style.display = 'none';
                        gatePasserNameOther.removeAttribute('required');
                        gatePasserNameOther.value = '';
                        document.getElementById('gatePasserNameOtherFeedback').style.display = 'none';
                    } else {
                        gatePasserNameContainer.style.display = 'none';
                        gatePasserNameSelect.removeAttribute('required');
                        gatePasserNameSelect.value = '';
                        gatePasserNameSelect.classList.remove('is-invalid');
                        gatePasserNameOther.style.display = 'none';
                        gatePasserNameOther.value = '';
                        gatePasserNameOther.removeAttribute('required');
                        document.getElementById('gatePasserNameOtherFeedback').style.display = 'none';
                    }
                });
            }

            // Toggle between dropdown and text input for Gate-Passer's Name when "Other" is selected
            const gatePasserNameOther = document.getElementById('gatePasserNameOther');
            if (gatePasserNameSelect) {
                gatePasserNameSelect.addEventListener('change', function () {
                    if (this.value === 'Other') {
                        this.style.display = 'none';
                        gatePasserNameOther.style.display = 'block';
                        gatePasserNameOther.setAttribute('required', 'required');
                        this.removeAttribute('required');
                        gatePasserNameOther.focus();
                        document.getElementById('gatePasserNameOtherFeedback').style.display = 'none';
                    }
                });
            }

            // If user focuses out of the text input and it's empty, revert back to dropdown
            if (gatePasserNameOther) {
                gatePasserNameOther.addEventListener('blur', function () {
                if (this.value.trim() === '') {
                    this.style.display = 'none';
                    gatePasserNameSelect.style.display = 'block';
                    gatePasserNameSelect.setAttribute('required', 'required');
                    this.removeAttribute('required');
                    gatePasserNameSelect.value = '';
                    document.getElementById('gatePasserNameOtherFeedback').style.display = 'none';
                }
                });
            }
        })();
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
